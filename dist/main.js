(()=>{"use strict";class t{constructor(t,e,n,i,s,a){this.title=t,this.description=e,this.dueDate=n,this.priority=i,this.notes=s,this.status=a}get title(){return this._title}get status(){return this._status}get dueDate(){return this._dueDate}get priority(){return this._priority}get info(){return`Title: ${this._title} \r\n\n        Description: ${this._description} \r\n\n        Due Date: ${this._dueDate} \r\n\n        Priority: ${this._priority} \r\n\n        Notes: ${this._notes} `}set title(t){this._title=t}set description(t){this._description=t}set priority(t){this._priority=t}set dueDate(t){this._dueDate=t}set notes(t){this._notes=t}set status(t){this._status=t}}function e(){let e=document.getElementById("itemName").value,n=document.getElementById("itemDescription").value,i=document.getElementById("dueDate").value,s=document.getElementById("priority").value,a=document.getElementById("notes").value,d=document.getElementById("complete").value;return new t(e,n,i,s,a,d)}!function(){const t=document.getElementById("main"),n=document.getElementById("addButton"),i=document.getElementById("projectFormContainer"),s=document.getElementById("projectSubmitButton"),a=document.getElementById("projectName"),d=document.getElementById("projectDescription"),l=document.getElementById("projectClose");let o="",c="",r="",u=document.getElementById(c),m=[],p=[],h=[],f=[],C=[],g=document.getElementById(o);function L(){h.push([]),f.push([])}function y(){let e=document.createElement("div");return t.appendChild(e),e}function b(t){let e=document.createElement("div");e.classList.add("project");let n=document.createElement("p");n.classList.add("projectTitle"),n.setAttribute("data-projectitle",h.length-1),n.textContent=`Project Title: ${a.value}`;let i=document.createElement("p");return i.classList.add("projectDescription"),i.setAttribute("data-projectdescription",h.length-1),i.textContent=`Project Description: ${d.value}`,t.appendChild(e),e.appendChild(n),e.appendChild(i),e}function E(t){return t.setAttribute("id",h.length-1),t.id}function v(t){let e=document.createElement("div"),n=document.createElement("select");n.setAttribute("data-sortinput",h.length-1),e.classList.add("sortButtons");let i=document.createElement("option");i.setAttribute("value","Name"),i.textContent="Sort By Name";let s=document.createElement("option");s.setAttribute("value","Priority"),s.textContent="Sort By Priority";let a=document.createElement("option");a.setAttribute("value","dueDate"),a.textContent="Sort By Due Date";let d=document.createElement("option");d.setAttribute("value","Completion"),d.textContent="Sort By Completion";let l=document.createElement("button");return l.setAttribute("data-sort",h.length-1),l.textContent="Submit",t.appendChild(e),e.appendChild(n),n.appendChild(i),n.appendChild(s),n.appendChild(a),n.appendChild(d),e.appendChild(l),l}function k(t){let e=document.createElement("div");return e.classList.add("buttonSection"),e.setAttribute("data-projectButtons",h.length-1),t.appendChild(e),e}function $(t){let e=document.createElement("button");return e.classList.add("addToDoButton"),e.setAttribute("data-add",h.length-1),e.innerText="Add Task",t.appendChild(e),e}function A(t){m.push(t)}function B(t){let e=document.createElement("button");return e.classList.add("deleteButton"),e.setAttribute("data-delete",h.length-1),e.innerText="Delete",t.appendChild(e),e}function I(t){p.push(t)}function x(t){let e=document.createElement("button");return e.classList.add("projectEditButton"),e.setAttribute("data-projectedit",h.length-1),e.innerText="Edit Project",t.appendChild(e),e}function D(t){C.push(t)}function N(t){t.addEventListener("click",(function(){i.classList.remove("hidden"),i.classList.add("edit"),r=t.dataset.projectedit}))}function S(){let t=Array.from(document.querySelectorAll("input"));for(let e=0;e<t.length;e++)t[e].value=""}function j(){for(let t=0;t<m.length;t++)m[t].addEventListener("click",(function(){w.classList.remove("hidden"),o=m[t].dataset.add,g=document.getElementById(o),F.classList.remove("editItem"),F.classList.add("addItem")}))}function T(e){e.addEventListener("click",(function(){c=e.dataset.delete,u=document.getElementById(c),h.splice(c,1),m.splice(c,1),p.splice(c,1),m.splice(c,1),document.querySelector(`[data-projectbuttons="${c}"]`),t.removeChild(u.parentNode)}))}function _(t,e){"Name"==e.value?t.sort(((t,e)=>t.title>e.title?1:-1)):"Priority"==e.value?t.sort(((t,e)=>t.priority>e.priority?1:-1)):"Completion"==e.value?t.sort(((t,e)=>t.status>e.status?-1:1)):"dueDate"==e.value&&t.sort(((t,e)=>t.dueDate>e.dueDate?1:-1))}function q(t){t.addEventListener("click",(function(){let e=t.dataset.sort,n=document.querySelector(`[data-sortinput="${e}"]`),i=h[e],s=f[e];0!=i.length&&(_(i,n),_(s,n),function(t,e){let n=document.getElementById(t);!function(t,e){for(let n=0;n<e.length;n++)t.removeChild(t.lastChild)}(n,e);for(let i=0;i<e.length;i++){let e=document.createElement("div");e.classList.add("taskContainer"),n.appendChild(e),e.setAttribute("data-taskcontainer",`${t}${[i]}`),e.setAttribute("data-specifictaskcontainer",[i]);let s=Z(h[t][i],e);s.setAttribute("data-checkbox",`${t}${[i]}`),s.setAttribute("data-specificcheckbox",[i]);let a=X(e,h[t][i]);a.setAttribute("data-task",`${t}${[i]}`),a.setAttribute("data-specifictask",[i]);let d=tt(e),l=et(d);l.setAttribute("data-edit",`${t}${[i]}`),l.setAttribute("data-specificedit",[i]);let o=nt(d);o.setAttribute("data-deleteItem",`${t}${[i]}`),o.setAttribute("data-specificdeleteItem",[i]),it(s),st(l),at(o),dt(),lt(),ct(s),rt(),ot(s)}}(e,i),ft())}))}function P(t){let e=document.createElement("div");e.classList.add("statusBarContainer");let n=document.createElement("div"),i=document.createElement("div");return n.classList.add("statusBar"),n.setAttribute("data-statusbar",h.length-1),i.classList.add("percentageText"),i.setAttribute("data-percentagetext",h.length-1),t.appendChild(e),e.appendChild(n),e.appendChild(i),statusbar}n.addEventListener("click",(function(){i.classList.remove("hidden")})),s.addEventListener("click",(function(){if(!i.classList.contains("edit")){L();let t=y(),e=b(t);E(e),P(e),q(v(e));let n=k(t),s=x(n);D(s),A($(n));let a=B(n);I(a),j(),T(a),N(s),i.classList.add("hidden"),S(),ft()}})),s.addEventListener("click",(function(){if(i.classList.contains("edit")){let t=document.querySelector(`[data-projectitle="${r}"]`),e=document.querySelector(`[data-projectdescription="${r}"]`);console.log(t,e),t.textContent=`Project Title: ${a.value}`,e.textContent=`Project Description: ${d.value}`,S(),i.classList.add("hidden"),i.classList.remove("edit"),ft()}})),l.addEventListener("click",(function(){i.classList.add("hidden")}));const w=document.getElementById("itemFormContainer");let F=document.getElementById("itemForm"),O="",J=[],R=[];const M=document.getElementById("itemSubmitButton");let z="",G=document.getElementById(z),H=document.getElementById(O),K=document.getElementById("reset");const Q=document.getElementById("taskClose");let U=document.querySelector(`[data-checkbox="${z}"]`),V=[];function W(){let t=document.createElement("div");return t.classList.add("taskContainer"),g.appendChild(t),t}function X(t,e){let n=document.createElement("div");return n.classList.add("newTask"),"Complete"!=e.status?n.classList.add("taskNotComplete"):n.classList.add("taskComplete"),n.textContent=e.info,t.appendChild(n),n}function Y(t){h[o].push(t),f[o].push(t)}function Z(t,e){let n=document.createElement("button");return n.classList.add("checkbox"),"Complete"!=t.status?(n.classList.add("notComplete"),e.appendChild(n)):"Complete"==t.status&&(n.classList.add("Complete"),e.appendChild(n)),n}function tt(t){let e=document.createElement("div");return e.classList.add("itemButtons"),t.appendChild(e),e}function et(t){let e=document.createElement("button");return e.innerText="Edit Task",e.classList.add("editTaskButton"),t.appendChild(e),e}function nt(t){let e=document.createElement("button");return e.innerText="Delete Task",e.classList.add("deleteTaskButton"),t.appendChild(e),e}function it(t){V.push(t)}function st(t){J.push(t)}function at(t){R.push(t)}function dt(){for(let t=0;t<J.length;t++)J[t].addEventListener("click",(function(){w.classList.remove("hidden"),F.classList.remove("addItem"),F.classList.add("editItem"),z=J[t].dataset.edit,G=document.querySelector(`[data-task="${z}"]`)}))}function lt(){for(let t=0;t<R.length;t++)R[t].addEventListener("click",(function(){O=R[t].dataset.deleteitem,H=document.querySelector(`[data-taskContainer="${O}"]`),H.parentNode.removeChild(H),R.splice([t],1),J.splice([t],1),V.splice([t],1)}))}function ot(t){t.addEventListener("click",(function(){let e=ut(),n=t.parentNode.parentNode.id,i=document.querySelector(`[data-statusbar="${n}"]`);console.log(i);let s=document.createElement("div");i.firstChild&&i.removeChild(i.firstChild),s.style.width=`${e.percentageArray[n]}%`,s.style.height="100%",i.appendChild(s),pt(i,e.percentageArray[n])}))}function ct(t){t.addEventListener("click",(function(){let e=t.dataset.specificcheckbox,n=t.parentNode.parentNode.id;t.classList.contains("notComplete")?(t.classList.remove("notComplete"),t.classList.add("Complete"),h[n][e].status="Complete"):t.classList.contains("Complete")&&(t.classList.add("notComplete"),t.classList.remove("Complete"),h[n][e].status="Not Complete"),ft()}))}function rt(){for(let t=0;t<V.length;t++)V[t].addEventListener("click",(function(){let e=V[t].dataset.checkbox,n=document.querySelector(`[data-task="${e}"]`);V[t].classList.contains("Complete")?(n.classList.remove("taskNotComplete"),n.classList.add("taskComplete")):V[t].classList.contains("notComplete")&&(n.classList.add("taskNotComplete"),n.classList.remove("taskComplete"))}))}function ut(){let t=[],e=[];for(let n=0;n<h.length;n++){let i=h[n].filter(mt);t.push(i);let s=Math.round(i.length/h[n].length*100);e.push(s)}return{filteredArrayList:t,percentageArray:e}}function mt(t){return"Complete"==t.status}function pt(t,e){let n=t.dataset.statusbar;document.querySelector(`[data-percentagetext="${n}"]`).innerText=`${e}% Complete`}function ht(){let t=ut();pt(function(t){let e=document.querySelector(`[data-statusbar="${o}"]`),n=document.createElement("div");return e.firstChild&&e.removeChild(e.firstChild),n.style.width=`${t}%`,n.style.height="100%",e.appendChild(n),e}(t.percentageArray[o]),t.percentageArray[o])}function ft(){localStorage.setItem("storedProjectList",JSON.stringify(f))}function Ct(t){t.info=function(t){return`Title: ${t._title} \r\n\n        Description: ${t._description} \r\n\n        Due Date: ${t._dueDate} \r\n\n        Priority: ${t._priority} \r\n\n        Notes: ${t._notes} `}(t)}function gt(){L();let t=y(),e=b(t);E(e),P(e),q(v(e));let n=k(t),i=x(n);D(i),A($(n));let s=B(n);I(s),j(),T(s),N(i)}function Lt(t){Y(t);let e=W();e.setAttribute("data-taskcontainer",`${[o]}${h[o].length-1}`),e.setAttribute("data-specifictaskcontainer",""+(h[o].length-1));let n=Z(t,e);n.setAttribute("data-checkbox",`${[o]}${h[o].length-1}`),n.setAttribute("data-specificcheckbox",""+(h[o].length-1));let i=X(e,t);i.setAttribute("data-task",`${[o]}${h[o].length-1}`),i.setAttribute("data-specifictask",""+(h[o].length-1)),ht();let s=tt(e),a=et(s);a.setAttribute("data-edit",`${[o]}${h[o].length-1}`),a.setAttribute("data-specificedit",""+(h[o].length-1));let d=nt(s);d.setAttribute("data-deleteItem",`${[o]}${h[o].length-1}`),d.setAttribute("data-specificdeleteItem",""+(h[o].length-1)),it(n),st(a),at(d),dt(),lt(),ct(n),ot(n),rt()}M.addEventListener("click",(function(){F.classList.contains("addItem")?function(){let t=e();if(null!=t&&""!=t.dueDate){Y(t);let e=W();e.setAttribute("data-taskcontainer",`${[o]}${h[o].length-1}`),e.setAttribute("data-specifictaskcontainer",""+(h[o].length-1));let n=Z(t,e);n.setAttribute("data-checkbox",`${[o]}${h[o].length-1}`),n.setAttribute("data-specificcheckbox",""+(h[o].length-1));let i=X(e,t);i.setAttribute("data-task",`${[o]}${h[o].length-1}`),i.setAttribute("data-specifictask",""+(h[o].length-1)),ht();let s=tt(e),a=et(s);a.setAttribute("data-edit",`${[o]}${h[o].length-1}`),a.setAttribute("data-specificedit",""+(h[o].length-1));let d=nt(s);d.setAttribute("data-deleteItem",`${[o]}${h[o].length-1}`),d.setAttribute("data-specificdeleteItem",""+(h[o].length-1)),it(n),st(a),at(d),dt(),lt(),ct(n),ot(n),rt(),S(),w.classList.add("hidden"),ft()}else alert("Please Fill Out Required Fields")}():F.classList.contains("editItem")&&function(){F.classList.remove("addItem");let t=e();var n;null!=t&&""!=t.dueDate?(console.log(z),console.log(G),G.innerText="",G.innerText=t.info,function(t){let e=G.parentNode,n=G.dataset.specifictask,i=e.parentNode.id;h[i].splice(n,1,t)}(t),function(t){let e=document.querySelector(`[data-task="${z}"]`),n=e.dataset.specifictask,i=e.parentNode.parentNode.id;"Complete"!=t.status?(e.classList.add("taskNotComplete"),e.classList.remove("taskComplete"),h[i][n].status="Not Complete"):"Complete"==t.status&&(e.classList.remove("taskNotComplete"),e.classList.add("taskComplete"),h[i][n].status="Complete")}(t),"Complete"!=(n=t).status?(U=document.querySelector(`[data-checkbox="${z}"]`),U.classList.add("notComplete"),U.classList.remove("Complete")):"Complete"==n.status&&(U=document.querySelector(`[data-checkbox="${z}"]`),U.classList.add("Complete"),U.classList.remove("notComplete")),function(){let t=ut(),e=G.parentNode.parentNode.id;console.log(e),pt(function(t){let e=G.parentNode.parentNode.id,n=document.querySelector(`[data-statusbar="${e}"]`),i=document.createElement("div");return n.firstChild&&n.removeChild(n.firstChild),i.style.width=`${t}%`,i.style.height="100%",n.appendChild(i),n}(t.percentageArray[e]),t.percentageArray[e])}(),S(),w.classList.add("hidden"),ft()):alert("Please Fill Out Required Fields")}()})),K.addEventListener("click",(()=>S())),Q.addEventListener("click",(()=>w.classList.add("hidden"))),window.onload=()=>{!function(){let t=JSON.parse(localStorage.getItem("storedProjectList"));for(const e in t)gt(),t[e].forEach((function(t){g=document.getElementById(e),o=e;let n=t;Ct(n),Lt(n)}))}()}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,